logging:
  version: 1
  disable_existing_loggers: False
  root:
    handlers:
      - console
      - file
    level: DEBUG
  loggers:
    idp:
      level: DEBUG
  handlers:
    console:
      class: logging.StreamHandler
      stream: 'ext://sys.stdout'
      formatter: default
    file:
      class: logging.FileHandler
      filename: 'debug.log'
      formatter: default
  formatters:
    default:
      format: '%(asctime)s %(name)s %(levelname)s %(message)s'

port: &port 8090
domain: &domain 127.0.0.1
base_url: "https://{domain}:{port}"

http_params:
  # This is just for testing an local usage. In all other cases it MUST be True
  verify_ssl: false
  # Client side
  #client_cert: "certs/client.crt"
  #client_key: "certs/client.key"

keydefs: &keydef
  -
    "type": "RSA"
    "key": ''
    "use": ["sig"]
  -
    "type": "EC"
    "crv": "P-256"
    "use": ["sig"]

html_home: 'html'
secret_key: 'secret_key'
session_cookie_name: 'rp_session'
preferred_url_scheme: 'https'

rp_keys:
    'private_path': 'private/jwks.json'
    'key_defs': *keydef
    'public_path': 'static/jwks.json'
    # this will create the jwks files if they are absent
    'read_only': False

client_preferences: &id001
    application_name: rphandler
    application_type: web
    contacts: [ops@example.com]
    response_types: [code]
    scope: [openid, profile, email, address, phone]
    token_endpoint_auth_method: [client_secret_basic, client_secret_post]

services: &id002
  discovery:
    class: oidcservice.oidc.provider_info_discovery.ProviderInfoDiscovery
    kwargs: {}
  registration:
    class: oidcservice.oidc.registration.Registration
    kwargs: {}
  authorization:
    class: oidcservice.oidc.authorization.Authorization
    kwargs: {}
  accesstoken:
    class: oidcservice.oidc.access_token.AccessToken
    kwargs: {}
  userinfo:
    class: oidcservice.oidc.userinfo.UserInfo
    kwargs: {}
  end_session:
    class: oidcservice.oidc.end_session.EndSession
    kwargs: {}

clients:
  "":
    client_preferences: *id001
    redirect_uris: None
    services: *id002
  flop:
    client_preferences: *id001
    issuer: https://127.0.0.1:5000/
    jwks_uri: 'static/jwks.json'
    redirect_uris: ['https://{domain}:{port}/authz_cb/flop']
    services: *id002
    add_ons:
      pkce:
        function: oidcservice.oidc.add_on.pkce.add_pkce_support
        kwargs:
          code_challenge_length: 64
          code_challenge_method: S256
  bobcat:
    client_id: client3
    client_secret: 2222222222222222222222222222222222222222
    client_preferences: *id001
    issuer: http://127.0.0.1:8080/
    jwks_uri: 'static/jwks.json'
    redirect_uris: ['https://{domain}:{port}/authz_cb/bobcat']
    services: *id002
    request_args:
      claims:
        id_token:
          acr:
            essential:
              true


webserver:
  port: *port
  domain: *domain
  # If BASE is https these has to be specified
  server_cert: "certs/cert.pem"
  server_key: "certs/key.pem"
  # If you want the clients cert to be verified
  # verify_user: optional
  # The you also need
  # ca_bundle: ''
  debug: true
